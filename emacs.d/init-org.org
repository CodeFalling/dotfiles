* General setup

#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t
        org-startup-folded 'content
        org-export-backends '(ascii html icalendar latex md odt)
        org-babel-load-languages '((emacs-lisp . t) (ruby . t) (python . t) (sh . t))
        org-use-fast-tag-selection 'auto
        org-time-stamp-custom-formats '("<%a %e %b %Y>" . "<%a %e %b %Y %H:%M>")
        )
  
  (add-hook 'org-mode-hook 'turn-off-filladapt-mode)
  (add-hook 'org-mode-hook 'visual-line-mode)
#+END_SRC

* File locations

#+BEGIN_SRC emacs-lisp
  (setq org-directory (expand-file-name "Notes/Todo" jc/dropbox-location)
        org-default-notes-file (expand-file-name "Notes/@Inbox/@Inbox.org" jc/dropbox-location)
        org-agenda-files (expand-file-name "agenda-files" org-directory)
        org-mobile-inbox-for-pull org-default-notes-file
        org-mobile-directory (expand-file-name "Apps/MobileOrg" jc/dropbox-location)
        )
#+END_SRC

* Key bindings

** Global key bindings

#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC

** Make windmove work in org-mode

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-shiftup-final-hook 'windmove-up)
  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  (add-hook 'org-shiftright-final-hook 'windmove-right)
#+END_SRC

* Capture

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates '(
                                ("t" "Todo" entry (file "") "* TODO %?")
                                ("n" "Note" entry (file "") "* %?")
                                )
        org-refile-targets '((nil :maxlevel . 5) (org-agenda-files :maxlevel . 4))
        )
#+END_SRC

* Refile

#+BEGIN_SRC emacs-lisp
  (setq org-refile-use-outline-path t
        org-refile-targets
        `(
          (nil :maxlevel . 5)
          (org-agenda-files :maxlevel . 4)
          (,(expand-file-name "someday.org" org-directory) :maxlevel . 2)
          (,(expand-file-name "people-agendas.org" org-directory) :maxlevel . 1)
          )
        )
#+END_SRC
* Archive

#+BEGIN_SRC emacs-lisp
  (setq org-archive-location "%s_archive::datetree/")
#+END_SRC
* Encryption

#+BEGIN_SRC emacs-lisp
  (require 'org-crypt)
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance (quote ("crypt")))
#+END_SRC

* Todo

#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
          (sequence "ONHOLD(h)" "WAITING(w)" "MONITOR(m)" "|" "CANCELED(c)"))
        
        org-todo-keyword-faces
        '(("NEXT" . "red")
          ("ONHOLD" . org-agenda-dimmed-todo-face)
          ("WAITING" . "yellow")
          ("MONITOR" . "yellow"))
  
        org-enforce-todo-dependencies t
        )
#+END_SRC

** Additional checklist features

Allows resetting of checklist items in repeating TODO's.

#+BEGIN_SRC emacs-lisp
  (require 'org-checklist)
#+END_SRC

* Agenda

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-todo-ignore-scheduled 'future
        org-enforce-todo-dependencies t
        org-agenda-dim-blocked-tasks 'invisible
        org-agenda-repeating-timestamp-show-all nil
        org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled
        org-agenda-skip-scheduled-delay-if-deadline t
        org-agenda-skip-scheduled-if-deadline-is-shown t
        org-agenda-span 14 ;; days
        )
#+END_SRC

** Custom agenda views

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands
        '(
          ("n"
           "Agenda and all TODO's"
           (
            (agenda "")
            (alltodo "")
            )
           )
          ("u"
           "TODO categories"
           (
            (tags-todo "/!NEXT"
                       ((org-agenda-overriding-header "Things to do next")))
            (tags-todo "/!TODO"
                       ((org-agenda-overriding-header "Things to do")
                        (org-agenda-dim-blocked-tasks 'invisible)
                        (org-agenda-todo-ignore-scheduled 'future)))
            (tags-todo "/!WAITING"
                       ((org-agenda-overriding-header "Waiting for")))
            (tags-todo "/!MONITOR"
                       ((org-agenda-overriding-header "Monitor")))
            (tags-todo "/!ONHOLD"
                       ((org-agenda-overriding-header "On hold")))
            )
           )
          )
        
        org-agenda-tags-todo-honor-ignore-options t
        )
#+END_SRC
* Export

#+BEGIN_SRC emacs-lisp
  (setq org-export-backends '(ascii beamer html icalendar latex md odt))
#+END_SRC
* Mobile

#+BEGIN_SRC emacs-lisp
  (setq org-mobile-files `(org-agenda-files
                           ,(expand-file-name "someday.org" org-directory)
                           ,(expand-file-name "people-agendas.org" org-directory)))
#+END_SRC

* Additional features (not already loaded)

#+BEGIN_SRC emacs-lisp
  (require 'org-bbdb)
  (require 'org-bibtex)
  (require 'org-crypt)
  (require 'org-docview)
  (require 'org-gnus)
  (require 'org-info)
  (require 'org-irc)
  (require 'org-mhe)
  (require 'org-rmail)
  (require 'org-w3m)
  (require 'org-wl)
#+END_SRC
