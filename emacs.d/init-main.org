#+STARTUP: content

* Main init file

** Pre-setup

*** Disable menu bar and toolbar

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

Enable menu bar on Mac, as it doesn't make any difference:
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode
   (if (eq system-type 'darwin) 1 -1))
#+END_SRC

*** Set exec-path to find some key programs

#+BEGIN_SRC emacs-lisp
  (setq exec-path (append exec-path '("/usr/local/bin")))
#+END_SRC

*** Set load-path

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp")
#+END_SRC

** Install packages via el-get

*** Path for custom recipes
#+BEGIN_SRC emacs-lisp
  (add-to-list 'el-get-recipe-path "~/.emacs.d/recipes")
#+END_SRC

*** Packages to install

**** Basics

#+BEGIN_SRC emacs-lisp
  (setq my-packages
         '(
           el-get
           org-mode
           ))
#+END_SRC

**** Applications

#+BEGIN_SRC emacs-lisp
  (nconc my-packages
         '(
           sunrise-commander
           erc
           magit
           ecb
           emacs-w3m
           ))
#+END_SRC

**** Global customizations

#+BEGIN_SRC emacs-lisp
  (nconc my-packages
         '(
           ack
           yasnippet
           filladapt
           lacarte
           lorem-ipsum
           multiple-cursors
           adaptive-wrap
           ))
#+END_SRC

**** Color themes

#+BEGIN_SRC emacs-lisp
  (nconc my-packages
         '(
           zenburn-theme
           color-theme-solarized
           ))
#+END_SRC

**** Text/document editing

#+BEGIN_SRC emacs-lisp
  (nconc my-packages
         '(
           markdown-mode
           pandoc-mode
           emmet-mode ;; from local recipe
           auctex
           typopunct
           ))
#+END_SRC

**** Programming languages

#+BEGIN_SRC emacs-lisp
  (nconc my-packages
         '(
           ruby-mode
           ruby-electric
           ruby-tools
           haskell-mode
           slime ;; for lisp
           yaml-mode
           coffee-mode
           jade-mode
           scss-mode
           puppet-mode
           ))
#+END_SRC

*** And finally, install everything

#+BEGIN_SRC emacs-lisp
(el-get 'sync my-packages)
#+END_SRC


** Global setup

#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (setq tool-bar-mode nil
        menu-bar-mode nil
        scroll-bar-mode nil
        uniquify-buffer-name-style (quote post-forward)
        indent-tabs-mode nil
        standard-indent 2
        tab-stop-list (loop for n from 2 below 80 by 2 collect n)
        tab-width 2
        ispell-dictionary "british"
        )
  (global-auto-revert-mode)
#+END_SRC

*** Save backups and autosaves somewhere more sensible

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory))
        auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+END_SRC

*** Allow periodic saving of buffers

Use =M-x turn-on-real-auto-save= to activate for a given button. Default save period is 10s.

#+BEGIN_SRC emacs-lisp
  (require 'real-auto-save)
#+END_SRC

*** Choose theme

#+BEGIN_SRC emacs-lisp
  (load-theme 'tango-dark t)
#+END_SRC

*** Activate filladapt-mode

#+BEGIN_SRC emacs-lisp
  (require 'filladapt)
  (setq-default filladapt-mode t)
#+END_SRC

*** Activate IDO-mode

#+BEGIN_SRC emacs-lisp
  (require 'ido)
  (ido-mode t)
  (setq ido-enable-flex-matching t)
#+END_SRC

Disable auto-merging but trigger it with =C-c C-s=
#+BEGIN_SRC emacs-lisp
  (setq ido-auto-merge-work-directories-length -1)
  (define-key ido-file-dir-completion-map (kbd "C-c C-s")
    (lambda()
      (interactive)
      (ido-initiate-auto-merge (current-buffer))))
#+END_SRC

Ignore some more boring file extensions
#+BEGIN_SRC emacs-lisp
  (setq completion-ignored-extensions '(".o" "~" ".bin" ".lbin" ".so" ".a" ".ln" ".blg" ".bbl" ".elc" ".lof" ".glo" ".idx" ".lot" ".fls" ".nav" ".snm" ".svn/" ".hg/" ".git/" ".bzr/" "CVS/" "_darcs/" "_MTN/" ".fmt" ".tfm" ".class" ".fas" ".lib" ".mem" ".x86f" ".sparcf" ".dfsl" ".pfsl" ".d64fsl" ".p64fsl" ".lx64fsl" ".lx32fsl" ".dx64fsl" ".dx32fsl" ".fx64fsl" ".fx32fsl" ".sx64fsl" ".sx32fsl" ".wx64fsl" ".wx32fsl" ".fasl" ".ufsl" ".fsl" ".dxl" ".lo" ".la" ".gmo" ".mo" ".toc" ".aux" ".cp" ".fn" ".ky" ".pg" ".tp" ".vr" ".cps" ".fns" ".kys" ".pgs" ".tps" ".vrs" ".pyc" ".pyo" ".fdb_latexmk")
        ido-ignore-extensions t)
#+END_SRC

*** Activate yasnippet

#+BEGIN_SRC emacs-lisp
  (require 'yasnippet)
  (yas-global-mode 1)
  (setq yas-also-indent-first-line t
        yas-prompt-functions '(yas-dropdown-prompt yas-completing-prompt yas-ido-prompt yas-no-prompt))
#+END_SRC

*** Activate multiple-cursors

#+BEGIN_SRC emacs-lisp
  (require 'multiple-cursors)
#+END_SRC

*** Customise whitespace-mode

#+BEGIN_SRC emacs-lisp
  (setq whitespace-style
        (quote (face tabs spaces trailing lines space-before-tab
                     newline empty space-after-tab space-mark tab-mark
                     newline-mark)))
#+END_SRC

*** Enable windmove key bindings

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'windmove-default-keybindings)
    (windmove-default-keybindings))
#+END_SRC

*** Enable typopunct for typographical punctuation

See [[http://www.emacswiki.org/emacs/TypographicalPunctuationMarks][Typographical Punctuation Marks on EmacsWiki]] for documentation

#+BEGIN_SRC emacs-lisp
  (require 'typopunct)
  (setq typopunct-buffer-language 'english)
#+END_SRC

*** Org-mode

**** General setup

#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t
        org-startup-folded 'content
        org-export-backends '(ascii html icalendar latex md odt)
        org-babel-load-languages '((emacs-lisp . t) (ruby . t) (sh . t))
        org-use-fast-tag-selection t
        )

  (add-hook 'org-mode-hook 'turn-off-filladapt-mode)
  (add-hook 'org-mode-hook 'visual-line-mode)
#+END_SRC

**** Global key bindings

#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC

**** Make windmove work in org-mode

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-shiftup-final-hook 'windmove-up)
  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  (add-hook 'org-shiftright-final-hook 'windmove-right)
#+END_SRC

**** Capture

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates '(
                                ("t" "Todo" entry (file "") "* TODO %? %U")
                                ("n" "Note" entry (file "") "* %? %U")
                                ))
#+END_SRC

**** Encryption

#+BEGIN_SRC emacs-lisp
  (require 'org-crypt)
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance (quote ("crypt")))
#+END_SRC

** File-type specific

*** Text/documents

**** Markdown

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
  (add-hook 'markdown-mode-hook 'turn-on-pandoc)
  (add-hook 'markdown-mode-hook 'auto-fill-mode)
  (add-hook 'markdown-mode-hook 'flyspell-mode)
  (add-hook 'markdown-mode-hook 'typopunct-mode)
#+END_SRC

**** HTML/XML/etc

#+BEGIN_SRC emacs-lisp
  (add-hook 'sgml-mode-hook 'emmet-mode)
  (add-hook 'sgml-mode-hook 'typopunct-mode)
#+END_SRC

***** Configure emmet-mode

#+BEGIN_SRC emacs-lisp
  (setq emmet-indentation 4)
#+END_SRC

**** TeX

#+BEGIN_SRC emacs-lisp
  (setq TeX-PDF-mode t)
  (add-hook 'LaTeX-mode-hook 'outline-minor-mode)
  (add-hook 'LaTeX-mode-hook 'reftex-mode)
  (add-hook 'LaTeX-mode-hook 'typopunct-mode)
  (setq reftex-plug-into-AUCTeX t)
#+END_SRC

*** Programming languages

**** Ruby

#+BEGIN_SRC emacs-lisp
  (require 'ruby-tools)
  (add-to-list 'auto-mode-alist '("\\.thor\\'" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.gemspec\\'" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Thorfile\\'" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Gemfile\\'" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Guardfile\\'" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Rules\\'" . ruby-mode))
#+END_SRC

**** Shell scripts

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.zsh\\'" . sh-mode))
  (add-to-list 'auto-mode-alist '("PKGBUILD\\'" . sh-mode))
#+END_SRC

**** JavaScript

#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)
#+END_SRC
*** Mail editing

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.eml\\'" . mail-mode))
  (add-hook 'mail-mode-hook 'visual-line-mode)
#+END_SRC


** Applications

*** Emacs Code Browser

#+BEGIN_SRC emacs-lisp
  (setq ecb-options-version "2.40"
        ecb-primary-secondary-mouse-buttons (quote mouse-1--C-mouse-1)
        ecb-compilation-major-modes (quote (compilation-mode TeX-output-mode)))
#+END_SRC

**** Source files (include/exclude)

#+BEGIN_SRC emacs-lisp
  (setq ecb-source-file-regexps
        '(
          ;; In all folders:
          (".*"
           ;; Exclude
           ("\\(^\\(\\.\\|#\\)\\|\\(~$\\|\\.\\(elc\\|obj\\|o\\|class\\|lib\\|dll\\|a\\|so\\|cache\\|pyc\\)$\\)\\)")
           ;; Include
           ("^\\.\\(emacs\\|gnus\\)$"))
          ))
#+END_SRC

*** Dired/sunrise

#+BEGIN_SRC emacs-lisp
  (setq dired-omit-files "^\\.")
#+END_SRC

*** Magit

**** Global key bindings

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-S-g") 'magit-status)
#+END_SRC

** Extra functions

*** [[http://www.emacswiki.org/emacs/UnfillParagraph][unfill-paragraph]] function

Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph

#+BEGIN_SRC emacs-lisp
  (defun unfill-paragraph ()
    "Takes a multi-line paragraph and makes it into a single line of text."
    (interactive)
    (let ((fill-column (point-max)))
      (fill-paragraph nil)))
#+END_SRC


** Load local settings

#+BEGIN_SRC emacs-lisp
  (load "init-local" t)
#+END_SRC

*** Make customizations machine-local

#+BEGIN_SRC emacs-lisp
  (setq custom-file
        (concat "~/.emacs.d/custom." (system-name) ".el"))
  (load custom-file t)
#+END_SRC


** Start the server

#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC
