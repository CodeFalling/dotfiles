#+STARTUP: content

* Main init file

** Pre-setup

*** Load customisations

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el"
        jc/old-custom-file (concat "~/.emacs.d/custom." (system-name) ".el"))

  ;; Migrate seamlessly from old system
  (if (and (not (file-exists-p custom-file))
           (file-exists-p jc/old-custom-file))
      (rename-file jc/old-custom-file custom-file))

  (load custom-file t)
#+END_SRC

*** Disable menu bar and toolbar

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

Enable menu bar on Mac, as it doesn't make any difference:
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode
   (if (eq system-type 'darwin) 1 -1))
#+END_SRC

*** Set some useful variables

#+BEGIN_SRC emacs-lisp
  (setq jc/dropbox-location
        (expand-file-name "~/Dropbox/")
  
        viper-mode nil)
#+END_SRC
*** Set exec-path to find some key programs

#+BEGIN_SRC emacs-lisp
  (add-to-list 'exec-path "/usr/local/bin")
  
  (if (eq system-type 'darwin)
      (add-to-list 'exec-path "/usr/local/texlive/2013/bin/universal-darwin" t))
  
  (setenv "PATH" (mapconcat 'identity exec-path ":"))
#+END_SRC

*** Set load-path

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp")
#+END_SRC

** Install packages via el-get

*** Path for custom recipes
#+BEGIN_SRC emacs-lisp
  (add-to-list 'el-get-recipe-path "~/.emacs.d/recipes")
#+END_SRC

*** Set up for ELPA packages

Create ~package-user-dir~ if it doesn't exist already.  el-get will fail to install any packages from elpa otherwise.

#+BEGIN_SRC emacs-lisp
  (make-directory package-user-dir t)
#+END_SRC

*** Packages to install

#+BEGIN_SRC emacs-lisp
  (setq my-packages
         '(
#+END_SRC

**** Basics

#+BEGIN_SRC emacs-lisp
  el-get
  package
  org-mode
  dash
#+END_SRC

**** Applications

#+BEGIN_SRC emacs-lisp
  sunrise-commander
  sunrise-x-loop
  sunrise-x-checkpoints
  sunrise-x-tree
  magit
  mu4e
  ;ecb
#+END_SRC

**** Global customizations

#+BEGIN_SRC emacs-lisp
  evil
  evil-numbers
  evil-surround
  deft-turbo
  yasnippet
  helm
  helm-swoop
  projectile
  hydra
  ;; popwin
  mmm-mode
  filladapt
  lorem-ipsum
  multiple-cursors
  adaptive-wrap
  dropdown-list
  expand-region
  change-inner
  buffer-move
  avy
  ace-window
  ace-link
  linum-relative
  rainbow-mode
  unbound
#+END_SRC

**** Auto complete mode

#+BEGIN_SRC emacs-lisp
  auto-complete
  ac-python
  auto-complete-latex
  auto-complete-ruby
#+END_SRC

**** Appearance

#+BEGIN_SRC emacs-lisp
  color-theme-darktooth
  svg-mode-line-themes
  ocodo-svg-modelines
#+END_SRC

**** Text/document editing

#+BEGIN_SRC emacs-lisp
  markdown-mode
  pandoc-mode
  criticmarkup-emacs
  emmet-mode ;; from local recipe
  auctex
#+END_SRC

**** Programming languages and similar

#+BEGIN_SRC emacs-lisp
  ruby-mode
  yaml-mode
  coffee-mode
  haml-mode
  scss-mode
  lua-mode
  abc-mode
  graphviz-dot-mode
  ess ; S/R and related languages
  puppet-mode
#+END_SRC

*** And finally, install everything

#+BEGIN_SRC emacs-lisp
  ))

  (el-get 'sync my-packages)
#+END_SRC

** Require some key utilities

#+BEGIN_SRC emacs-lisp
  (require 'dash)
#+END_SRC

** Additional setup files

#+BEGIN_SRC emacs-lisp
  (jc/require-org-file "init-org.org")
#+END_SRC

** Global setup

#+BEGIN_SRC emacs-lisp
  (setq tool-bar-mode nil
        menu-bar-mode nil
        scroll-bar-mode nil
        indent-tabs-mode nil
        standard-indent 2
        tab-stop-list (loop for n from 2 below 80 by 2 collect n)
        ispell-dictionary "british"
        )
  
  (setq-default tab-width 2
                indent-tabs-mode nil)
  
  ;; Allow narrow-to-region (which is disabled by default)
  (put 'narrow-to-region 'disabled nil)
  
  ;; Auto-revert all buffers by default
  (global-auto-revert-mode)
  
  ;; Show date/time in modeline
  (setq display-time-day-and-date t)
  (display-time-mode 1)
  
  ;; Make sure authinfo is encrypted
  (setq auth-sources '("~/.authinfo.gpg")
        auth-source-gpg-encrypt-to '("j.cope@erambler.co.uk")
        )
#+END_SRC

*** Evil

#+BEGIN_SRC emacs-lisp
  (jc/require-org-file "init-evil.org")
  (evil-mode 1)
#+END_SRC

*** Initial buffer

#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message "* Scratch\n\n# This buffer is for notes you don't want to save, and for Lisp evaluation.\n\n#+BEGIN_SRC emacs-lisp\n\n#+END_SRC\n"
        initial-major-mode 'org-mode
        initial-buffer-choice t)
#+END_SRC

*** Fonts

Make some modes variable pitch by default
#+BEGIN_SRC emacs-lisp
  (dolist (hook '(
               org-mode-hook
               python-mode-hook
               markdown-mode-hook
               TeX-mode-hook
               ))
    (add-hook hook 'variable-pitch-mode))
#+END_SRC

Make some faces fixed pitch (mostly to fix vertical alignment issues)
#+BEGIN_SRC emacs-lisp
  (eval-after-load 'org-indent
    '(set-face-attribute 'org-indent nil :inherit '(fixed-pitch)))
  (add-hook 'after-init-hook
            (lambda ()
              (set-face-attribute 'org-table nil :inherit '(fixed-pitch))
              (set-face-attribute 'org-formula nil :inherit '(fixed-pitch))
              (set-face-attribute 'org-block nil :inherit '(fixed-pitch))))
#+END_SRC

*** Configure how to make buffer titles unique

This adds (to the filename) enough of the path after a vertical bar to make the title unique.

#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'post-forward)
#+END_SRC

*** Save backups and autosaves somewhere more sensible

#+BEGIN_SRC emacs-lisp
  (setq jc/autosave-directory
        (expand-file-name "../.autosave" dotfiles-dir))
  (setq backup-directory-alist
        `((".*" . ,jc/autosave-directory))
        auto-save-file-name-transforms
        `((".*" ,jc/autosave-directory t)))
#+END_SRC

*** Enable automatic saving of buffers

#+BEGIN_SRC emacs-lisp
  (if (fboundp 'handle-focus-out)
      ;; If we're in emacs â‰¥24.4 just save everything on focus-out
      (progn
        (defun jc/save-everything-no-prompt ()
          (interactive)
          (save-some-buffers t))

        (add-hook 'focus-out-hook 'jc/save-everything-no-prompt))

    ;; Otherwise use real-auto-save mode
    (require 'real-auto-save)
    (setq real-auto-save-interval 5) ;; in seconds
    (add-hook 'text-mode-hook 'turn-on-real-auto-save)
    (add-hook 'prog-mode-hook 'turn-on-real-auto-save))
#+END_SRC

*** Don't query about running processes on exit

#+BEGIN_SRC emacs-lisp
  (add-hook 'comint-exec-hook 
        (lambda () (set-process-query-on-exit-flag (get-buffer-process (current-buffer)) nil)))
#+END_SRC

*** Choose appearance

#+BEGIN_SRC emacs-lisp
  (load-theme 'darktooth t)
  (eval-after-load 'hydra
    '(progn
       (set-face-foreground 'hydra-face-red
                            (if (display-graphic-p) "#FB4933" "color-167"))
       (set-face-foreground 'hydra-face-blue
                            (if (display-graphic-p) "#83A598" "color-109"))
       (set-face-foreground 'hydra-face-pink
                            (if (display-graphic-p) "#D3869B" "color-175"))
       (set-face-foreground 'hydra-face-teal
                            (if (display-graphic-p) "#8EC07C" "color-108"))
       (set-face-foreground 'hydra-face-amaranth
                            (if (display-graphic-p) "#AF3A03" "color-130"))))

  (ocodo-svg-modelines-init)
  (smt/set-theme 'ocodo-mesh-aqua-smt)
#+END_SRC

*** Activate filladapt-mode

#+BEGIN_SRC emacs-lisp
  (require 'filladapt)
  (setq-default filladapt-mode t)
#+END_SRC

*** Activate yasnippet

#+BEGIN_SRC emacs-lisp
  (require 'yasnippet)
  (setq yas-snippet-dirs
        (-insert-at 1 (expand-file-name "snippets-local" dotfiles-dir) yas-snippet-dirs))

  (yas-global-mode 1)
  (add-hook 'wl-draft-mode-hook 'yas-minor-mode-on)

  (defun shk-yas/helm-prompt (prompt choices &optional display-fn)
      "Use helm to select a snippet. Put this into `yas-prompt-functions.'"
      (interactive)
      (setq display-fn (or display-fn 'identity))
      (if (require 'helm-config)
          (let (tmpsource cands result rmap)
            (setq cands (mapcar (lambda (x) (funcall display-fn x)) choices))
            (setq rmap (mapcar (lambda (x) (cons (funcall display-fn x) x)) choices))
            (setq tmpsource
                  (list
                   (cons 'name prompt)
                   (cons 'candidates cands)
                   '(action . (("Expand" . (lambda (selection) selection))))
                   ))
            (setq result (helm-other-buffer '(tmpsource) "*helm-select-yasnippet"))
            (if (null result)
                (signal 'quit "user quit!")
              (cdr (assoc result rmap))))
        nil))

  (require 'dropdown-list)
  (setq yas-also-indent-first-line t
        yas-prompt-functions '(shk-yas/helm-prompt
                               yas-dropdown-prompt
                               yas-x-prompt
                               yas-ido-prompt
                               yas-completing-prompt
                               yas-no-prompt))
#+END_SRC

**** Disable in some modes

#+BEGIN_SRC emacs-lisp
  (add-hook 'term-mode-hook (lambda()
                              (yas-minor-mode -1)))
#+END_SRC

*** Configure MMM-mode

=mmm-mode= allows multiple major modes to be active in different regions of a single buffer.n

#+BEGIN_SRC emacs-lisp
  (require 'mmm-auto)
  
  (setq mmm-global-mode 'maybe)
#+END_SRC

**** Detect YAML front matter in some files

[[http://nanoc.ws/][Nanoc]] uses [[http://nanoc.ws/docs/basics/#attributes][YAML sections at the start of files]] to define metadata.

#+BEGIN_SRC emacs-lisp
  (mmm-add-classes
   '((yaml-front-matter
      :submode yaml-mode
      :front "\\`---\n"
      :back "^---$")))

  (mmm-add-mode-ext-class 'markdown-mode nil 'yaml-front-matter)
  (mmm-add-mode-ext-class 'gfm-mode nil 'yaml-front-matter)
#+END_SRC

**** Check for new major mode regions after yas expansion

=yasnippet= needs to ask mmm-mode to reparse after completing a snippet.

#+BEGIN_SRC emacs-lisp
  (add-hook 'yas-after-exit-snippet-hook
            '(lambda ()
               (if mmm-mode
                   (mmm-parse-region yas-snippet-beg yas-snippet-end))))
#+END_SRC

*** Activate multiple-cursors

#+BEGIN_SRC emacs-lisp
  (require 'multiple-cursors)
  
  (global-set-key (kbd "<C-M-return>") 'mc/edit-ends-of-lines)
#+END_SRC

*** Customise whitespace-mode

#+BEGIN_SRC emacs-lisp
  (setq whitespace-style
        (quote (face tabs spaces trailing lines space-before-tab
                     newline empty space-after-tab space-mark tab-mark
                     newline-mark)))
#+END_SRC

*** Auto complete mode

#+BEGIN_SRC emacs-lisp
  (setq ac-dictionary-directories '("~/.emacs.d/dict"))
  (require 'auto-complete-config)
  (ac-config-default)
#+END_SRC

*** Activate and configure Helm

Set global helm-mode and some specific key bindings.
#+BEGIN_SRC emacs-lisp
  (require 'helm-config)

  (helm-mode 1)

  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-x b") 'helm-mini)
  (global-set-key (kbd "C-s") 'helm-swoop)
#+END_SRC

Enable fuzzy matching in some useful places.
#+BEGIN_SRC emacs-lisp
  (setq helm-M-x-fuzzy-match t
        helm-buffers-fuzzy-matching t
        helm-recentf-fuzzy-match t)
#+END_SRC

*** Use kill ring as X clipboard history                     :experimental:

This should ensure the X clipboard contents isn't lost during normal editing.

#+BEGIN_SRC emacs-lisp
  (setq save-interprogram-paste-before-kill t)
#+END_SRC

This doesn't work as I want it to right now - needs reworking.

#+BEGIN_SRC emacs-lisp
  ;; (defun jc/clipboard-to-kill-ring ()
  ;;   (interactive)
  ;;   (let ((clipboard (x-get-clipboard)))
  ;;     (when (not (string= clipboard (car kill-ring)))
  ;;       (kill-new (x-get-clipboard)))))
  
  ;; (setq jc/clipboard-to-kill-ring-timer
  ;;       (run-with-timer 0.5 0.5 'jc/clipboard-to-kill-ring))
#+END_SRC

*** Fix popup windows with popwin.el                             :disabled:

#+BEGIN_SRC emacs-lisp :tangle no
  (require 'popwin)

  (global-set-key (kbd "C-z") popwin:keymap)

  (setq popwin:special-display-config
        '(("*Miniedit Help*" :noselect t)
          help-mode
          (completion-list-mode :noselect t)
          (compilation-mode :noselect t)
          (grep-mode :noselect t)
          (occur-mode :noselect t)
          ("*Pp Macroexpand Output*" :noselect t)
          "*Shell Command Output*"
          "*vc-diff*"
          "*vc-change-log*"
          (" *undo-tree*" :width 60 :position right)
          ("^\\*anything.*\\*$" :regexp t)
          "*slime-apropos*"
          "*slime-macroexpansion*"
          "*slime-description*"
          ("*slime-compilation*" :noselect t)
          "*slime-xref*"
          (sldb-mode :stick t)
          slime-repl-mode
          slime-connection-list-mode
          (magit-status-mode :width 100 :position right)
          ("^\\*Org Src.*" :regexp t)
          (apropos-mode :width 70 :position left)
          ))

  (popwin-mode 1)

#+END_SRC

*** Configure expand-region and change-inner

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-=") 'er/expand-region)
  
  (global-set-key (kbd "M-i") 'change-inner)
  (global-set-key (kbd "M-o") 'change-outer)
#+END_SRC

*** Change M-z to leave the character alone

#+BEGIN_SRC emacs-lisp
  (autoload 'zap-up-to-char "misc"
    "Kill up to, but not including ARGth occurrence of CHAR.
  
  \(fn arg char)"
    'interactive)
  (global-set-key (kbd "M-z") 'zap-up-to-char)
#+END_SRC

*** Projectile

#+BEGIN_SRC emacs-lisp
  (setq projectile-mode-line '(:eval
                               (format " P[%s]"
                                       (projectile-project-name)))
        projectile-completion-system 'helm)

  (projectile-global-mode)
  (helm-projectile-on)

  ;; Taken from http://oremacs.com/2015/07/20/hydra-columns/
  (defhydra jc/projectile-hydra (:color blue :columns 4)
    "Projectile"
    ("a" projectile-ag "ag")
    ("b" projectile-switch-to-buffer "switch to buffer")
    ("c" projectile-invalidate-cache "cache clear")
    ("d" projectile-find-dir "dir")
    ("s-f" projectile-find-file "file")
    ("ff" projectile-find-file-dwim "file dwim")
    ("fd" projectile-find-file-in-directory "file curr dir")
    ("g" ggtags-update-tags "update gtags")
    ("i" projectile-ibuffer "Ibuffer")
    ("K" projectile-kill-buffers "Kill all buffers")
    ("o" projectile-multi-occur "multi-occur")
    ("p" projectile-switch-project "switch")
    ("r" projectile-recentf "recent file")
    ("x" projectile-remove-known-project "remove known")
    ("X" projectile-cleanup-known-projects "cleanup non-existing")
    ("z" projectile-cache-current-file "cache current")
    ("q" nil "cancel"))
  (global-unset-key (kbd "C-c p"))
  (global-set-key (kbd "C-c p") 'jc/projectile-hydra/body)
#+END_SRC

*** Deft (for quick reference)

#+BEGIN_SRC emacs-lisp
  (setq deft-directory (expand-file-name "Notes/Reference" jc/dropbox-location))
#+END_SRC

** Key bindings

*** Set print screen key to paste from X clipboard

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<print>") 'clipboard-yank)
#+END_SRC

*** Enable windmove key bindings

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'windmove-default-keybindings)
    (windmove-default-keybindings))
#+END_SRC

*** Launcher map

Thanks to suggestions on [[http://endlessparentheses.com/launcher-keymap-for-standalone-features.html][Endless Parentheses]] for these.  This one launches some handy commands.

#+BEGIN_SRC emacs-lisp
  (define-key ctl-x-map "l"
    (defhydra jc/launcher-hydra (:exit t)
      "launch"
      ("d" deft "deft")
      ("e" ecb-activate "ecb")
      ("g" magit-status "magit status")
      ("t" jc/ansi-term-with-zsh "terminal")
      ("m" mu4e "mu4e")
      ("f" sunrise "sunrise")
      ("i" jc/find-inbox-file "find inbox")))
#+END_SRC

This one toggles some minor modes.  Also inspired by [[http://endlessparentheses.com/the-toggle-map-and-wizardry.html][Endless Parentheses]].

#+BEGIN_SRC emacs-lisp
  (define-key ctl-x-map "t"
    (defhydra jc/toggle-hydra ()
      "toggle"
      ("c" column-number-mode "col num")
      ("l" line-number-mode "line num")
      ("f" auto-fill-mode "auto fill")
      ("v" variable-pitch-mode "var pitch")
      ("w" visual-line-mode "vis line")
      ("W" whitespace-mode "whitespace")))
#+END_SRC

These functions are required for some of the above.

#+BEGIN_SRC emacs-lisp
  (defun jc/find-inbox-file ()
    (interactive)
    (find-file org-default-notes-file))

  (defcustom jc/zsh-location "/usr/bin/zsh"
    "Location of zsh executable")
  (defun jc/ansi-term-with-zsh (arg)
    (interactive "P")
    (if arg
        (ansi-term jc/zsh-location "ansi-term[zsh]")
        (let ((shell-file-name jc/zsh-location))
        (shell "shell[zsh]"))))
#+END_SRC

*** Special keys on keyboards that have them

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<XF86Search>") 'ido-switch-buffer)
  (global-set-key (kbd "<S-XF86Search>") 'ido-find-file)
  
  (global-set-key (kbd "<XF86Favorites>") 'execute-extended-command)
  (global-set-key (kbd "<menu>") 'execute-extended-command)
  (global-set-key (kbd "<S-XF86Favorites>") 'eval-expression)
  (global-set-key (kbd "<S-menu>") 'eval-expression)
#+END_SRC

*** Extra special character bindings

#+BEGIN_SRC emacs-lisp
  (define-key 'iso-transl-ctl-x-8-map "l" [?Â£])
#+END_SRC

*** ~avy~ and ~ace-*~

Overall setup:

#+BEGIN_SRC emacs-lisp
  (setq avy-keys '(?a ?o ?e ?u ?i ?d ?h ?t ?n))
#+END_SRC

~ace-link~:

#+BEGIN_SRC emacs-lisp
  (ace-link-setup-default)
  (define-key org-mode-map (kbd "M-o") 'ace-link-org)
#+END_SRC

~ace-window~:

#+BEGIN_SRC emacs-lisp
  (define-key ctl-x-map (kbd "w") 'ace-window)
#+END_SRC

*** Other key bindings

#+BEGIN_SRC emacs-lisp
  (define-key ctl-x-map "k" 'kill-this-buffer)

  (defun jc/mark-whole-line ()
    (interactive)
    (beginning-of-line)
    (set-mark (point))
    (end-of-line))
  (define-key ctl-x-map (kbd "C-h") 'jc/mark-whole-line)
#+END_SRC
** File-type specific

*** Text/documents

**** Markdown

#+BEGIN_SRC emacs-lisp
  (dolist (ext '("\\.markdown\\'" "\\.md\\'"))
    (add-to-list 'auto-mode-alist `(,ext . markdown-mode)))

  (dolist (func '(
                  flyspell-mode
                  visual-line-mode
                  adaptive-wrap-prefix-mode
                  orgstruct++-mode
                  (lambda ()
                    (setq orgstruct-heading-prefix-regexp "#\\+")
                    (pandoc-mode 1))
                  ))
    (add-hook 'markdown-mode-hook func)
    (add-hook 'gfm-mode-hook func))
#+END_SRC

**** HTML/XML/etc

#+BEGIN_SRC emacs-lisp
  (add-hook 'sgml-mode-hook 'emmet-mode)
  (add-hook 'sgml-mode-hook 'rainbow-turn-on)
#+END_SRC

***** Configure emmet-mode

#+BEGIN_SRC emacs-lisp
  (setq emmet-indentation 4)
#+END_SRC

**** CSS

#+BEGIN_SRC emacs-lisp
  (add-hook 'css-mode-hook 'rainbow-turn-on)
#+END_SRC

**** TeX

#+BEGIN_SRC emacs-lisp
  (setq TeX-PDF-mode t
        TeX-engine 'luatex)
  (add-hook 'LaTeX-mode-hook 'outline-minor-mode)
  (add-hook 'LaTeX-mode-hook 'reftex-mode)
  (setq reftex-plug-into-AUCTeX t)

  (put 'LaTeX-narrow-to-environment 'disabled nil)
#+END_SRC

**** Haml/Sass

#+BEGIN_SRC emacs-lisp
  (add-hook 'scss-mode-hook 'rainbow-turn-on)
  (setq scss-compile-at-save nil)
#+END_SRC
*** Programming languages
**** Lisp

#+BEGIN_SRC emacs-lisp
  (add-hook 'lisp-mode-hook 'show-paren-mode)
#+END_SRC

**** Ruby

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.thor\\'" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.gemspec\\'" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Thorfile\\'" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Gemfile\\'" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Guardfile\\'" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Rules\\'" . ruby-mode))
#+END_SRC

**** Shell scripts

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.zsh\\'" . sh-mode))
  (add-to-list 'auto-mode-alist '("PKGBUILD\\'" . sh-mode))
#+END_SRC

**** JavaScript

#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)
#+END_SRC
*** Mail editing

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.eml\\'" . mail-mode))
  (add-hook 'mail-mode-hook 'visual-line-mode)
#+END_SRC


** Applications

*** Emacs Code Browser

#+BEGIN_SRC emacs-lisp
(setq ecb-tip-of-the-day nil
        ecb-primary-secondary-mouse-buttons (quote mouse-1--C-mouse-1)
        ecb-compilation-major-modes (quote (compilation-mode TeX-output-mode))
        )

  (add-hook 'ecb-activate-hook (lambda () (popwin-mode -1)))
  (add-hook 'ecb-deactivate-hook (lambda () (popwin-mode 1)))
#+END_SRC

**** Source files (include/exclude)

#+BEGIN_SRC emacs-lisp
  (setq ecb-source-file-regexps
        '(
          ;; In all folders:
          (".*"
           ;; Exclude
           ("\\(^\\(\\.\\|#\\)\\|\\(~$\\|\\.\\(elc\\|obj\\|o\\|class\\|lib\\|dll\\|a\\|so\\|cache\\|pyc\\)$\\)\\)")
           ;; Include
           ("^\\.\\(emacs\\|gnus\\)$"))
          ))
#+END_SRC

*** Dired/sunrise

#+BEGIN_SRC emacs-lisp
  (setq dired-omit-files "^\\."
        dired-listing-switches "-alh")
#+END_SRC

If the homebrew version of coreutils is installed under Mac, use that:

#+BEGIN_SRC emacs-lisp
  (if (file-exists-p "/usr/local/bin/gls")
      (setq insert-directory-program "/usr/local/bin/gls"))
#+END_SRC

**** Open file in external viewer using C-RET

[[http://www.emacswiki.org/emacs/Sunrise_Commander][Found on EmacsWiki]] and subsequently modified to run asynchronously

#+BEGIN_SRC emacs-lisp
  (defun jc/sunrise-display-external ()
    "Open marked files or file at point in an external application."
    (interactive)
    (let ((files (or (dired-get-marked-files)
                     (list (dired-get-filename)))))
      (dolist (file files)
        (start-process "sunrise external viewer" "*sunrise external viewer*"
                       shell-file-name shell-command-switch
                       (format "%s \"%s\"" jc/sunrise-external-viewer file)))))
  
  (setq jc/sunrise-external-viewer
        (cond ((eq system-type 'darwin) "open")
              (t "xdg-open")))
  
  (eval-after-load 'sunrise-commander
    '(define-key sr-mode-map (kbd "<C-return>") 'jc/sunrise-display-external))
#+END_SRC

*** BBDB

#+BEGIN_SRC emacs-lisp
  (setq bbdb-file-remote (expand-file-name "Emacs/bbdb" jc/dropbox-location))
#+END_SRC

*** Mu4e

#+BEGIN_SRC emacs-lisp
  (jc/require-org-file "init-mu4e.org")
#+END_SRC
** Extra functions

*** [[http://www.emacswiki.org/emacs/UnfillParagraph][unfill-paragraph]] function

Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph

#+BEGIN_SRC emacs-lisp
  (defun unfill-paragraph ()
    "Takes a multi-line paragraph and makes it into a single line of text."
    (interactive)
    (let ((fill-column (point-max)))
      (fill-paragraph nil)))
#+END_SRC

*** [[http://www.emacswiki.org/emacs/IncrementNumber][Increment decimal number under cursor]]

#+BEGIN_SRC emacs-lisp
  (defun my-increment-number-decimal (&optional arg)
    "Increment the number forward from point by 'arg'."
    (interactive "p*")
    (save-excursion
      (save-match-data
        (let (inc-by field-width answer)
          (setq inc-by (if arg arg 1))
          (skip-chars-backward "0123456789")
          (when (re-search-forward "[0-9]+" nil t)
            (setq field-width (- (match-end 0) (match-beginning 0)))
            (setq answer (+ (string-to-number (match-string 0) 10) inc-by))
            (when (< answer 0)
              (setq answer (+ (expt 10 field-width) answer)))
            (replace-match (format (concat "%0" (int-to-string field-width) "d")
                                   answer)))))))
  
  (global-set-key (kbd "C-c C-=") 'my-increment-number-decimal)
#+END_SRC

** Blogging helpers

*** Update ~created_at~ date/time

#+BEGIN_SRC emacs-lisp
  (defun jc/update-created-date ()
    (interactive)
    (save-excursion
      (goto-char 0)
      (when (re-search-forward "^created_at: ")
        (kill-line)
        (insert-string (format-time-string "%c"))))
    )

  (dolist (hook '(markdown-mode-hook gfm-mode-hook yaml-mode-hook))
    (add-hook hook
              (lambda () (local-set-key (kbd "C-c j b d") 'jc/update-created-date))))
#+END_SRC
** Load local settings

The ~t~ argument ensures no error is thrown if the file doesn't exist.

#+BEGIN_SRC emacs-lisp
  (when (file-exists-p (expand-file-name "init-local.org" dotfiles-dir))
    (jc/require-org-file "init-local.org"))
  
  (load "local.el" t)
#+END_SRC

** Start the server

#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC
